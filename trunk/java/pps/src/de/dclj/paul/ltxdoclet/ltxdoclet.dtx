% \iffalse meta-comment
%
%%  (C) 2010 Paul Ebermann
%%
%%   Package ltxdoclet - Dokumentation von Java-Paketen.
%%
%%   Die Datei ltxdoclet.dtx sowie die dazugehörige
%%   ltxdoclet.ins sowie die damit generierte
%%   ltxdoclet.sty stehen unter der
%%   "LaTeX Project Public License" (LPPL, zu finden
%%   unter http://www.latex-project.org/lppl/, sowie
%%   auch in den meisten TeX-Distributionen in
%%   texmf/docs/latex/base/lppl*.txt), Version 1.3b oder
%%   später (nach Wahl des Verwenders).
%%
%%   Der 'maintenance-status' ist (zur Zeit) 'author-maintained'.
%%   
%%   Das heißt u.a., die Dateien dürfen frei vertrieben werden,
%%   bei Änderungen (durch andere Personen als Paul Ebermann)
%%   ist aber der Name der Datei zu ändern.
%
% \fi
%
% \iffalse
% ---------------------------------------------
%<package>\NeedsTeXFormat{LaTeX2e}[2003/12/01]%
% -----------------------------------________________------------------
%<package>\ProvidesPackage{ltxdoclet}[2010/02/14 v0.0 Dokumentation von Java-Paketen (PE)]
% ------------------------------------________________-----------------
% \fi
%
% \iffalse
%<*driver>
\documentclass{scrartcl}
%
\RequirePackage[utf8]{inputenc}
%!\PrerenderUnicode{}
\RequirePackage[ngerman]{babel}
\addto{\extrasesperanto}{%
  \renewcommand*{\generalname}{\^Generale}%
  \GlossaryPrologue{%
    \section{\^San\^goj}%
  }%
  \GlossaryMin=3\baselineskip
  \IndexPrologue{%
    \section{Indekso}
    Kurzivaj nombroj indikas la lokojn, kie la indeks-ero estas priskribita,
    substrekitaj nombroj indikas la lokon de la difino, la aliaj estas uzoj.
  }
  \IndexMin=5\baselineskip
}

\usepackage[dvipsnames]{xcolor}
\usepackage{ltxdoclet}
%! \usepackage[scaled]{luximono}
\usepackage[bookmarks=false]{hyperref}
\usepackage[countalllines, withmarginpar]{gmdoc}
\usepackage[inline, visible]{gmdoc-enhance}
\let\pack\textrm%
\renewcommand*{\EOFMark}{}

\RecordChanges
\begin{document}
   % ^ ne taŭgas kiel specialsigno, ĉar ni
   % bezonas ĝin por ^^B, ^^M ktp.
   \catcode`\^=7%
   \MakeShortVerb\'
   \errorcontextlines=30%
   \DocInput{ltxdoclet.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \GetFileInfo{ltxdoclet.sty}
%
%
% \title{Das \pack{ltxdoclet}-Paket: Java-Dokumentation (und Quelltexte) in \LaTeX. \
%   \thanks{ Dieses Dokument gehört zu \
%    \pack{ltxdoclet}~\fileversion, von~\filedate.}}
% \author{Paul Ebermann\thanks{\texttt{Paul-Ebermann@gmx.de}}}
%
% \maketitle
% 
%
% \tableofcontents
%
% \section{Nutzerdoku}
%
%  \hyperlink{test-target}{Springe zum Ziel}
%
% \StopEventually{\PrintChanges\PrintIndex}
%
% \section{Implementation}
%
%<*package>
%
%
% \subsection{Package-Optionen}
%
%  Bisher gibt es keine.
%
% \subsection{Geladene Pakete}
%
% Wir laden das \pack{color}-Paket, um Farben verwenden zu können.
%!\RequirePackage[dvipsnames]{color}

%
% \subsection{Diverse Makros}
%
% \begin{macro}{\noprint}
%   '\noprint' ist ein Klon des '\@gobble'-Makros aus dem \LaTeX-Kernel.
%   Es dient dazu, im generierten \LaTeX-Quelltext Debug-Informationen auszugeben,
%   ohne dass sie in der Ausgabe auftauchen.
\newcommand*\noprint[1]{}%
% \end{macro}
%
% \subsection{Text ausrichten}
%
% \begin{macro}{\clap}
%   Dieses Makro habe ich aus \pack{mathtools} geklaut. Es ist ein Verwandter 
%   der bekannten '\llap' und '\rlap'. Es setzt eine horizontale Box mit dem
%   Argument als Inhalt zentriert an der aktuellen Stelle, ohne dass sie Platz
%   verwendet.
\newcommand*\clap[1]{%
  \hb@xt@\z@{\hss#1\hss}
}
% \end{macro}
%
% \begin{macro}{\clapon}\marg{text1}\marg{text2}
%   Verwandt mit '\clap', zentriert dieses Makro \meta{text1} nicht
%   mit Breite $0$, sondern über \meta{text2}. (D.h. beides wird gesetzt,
%   relativ zueinander zentriert, und das Ergebnis hat die Breite von
%   \meta{text2}.) 
\providecommand*{\clapon}[2]{%
  \setbox\@tempboxa\hbox{#2}% Wir merken uns \meta{text2} in einer Box.
  \hbox to\wd\@tempboxa{% Dann öffnen wir eine Box mit der
% Breite von \meta{text2}, \dots
    \hss#1\hss}% \dots und setzen darin \meta{text1}, mit beidseitig
% flexiblem Platz (d.h. zentriert).
  \kern-\wd\@tempboxa% Dann gehen wir wieder zurück
% zum Anfang (mit einem negativen Abstand).
  \unhbox\@tempboxa}% und hier setzen wir \meta{text1},
% außerhalb seiner Box. (Es ist zu überlegen, ob statt '\unhbox'
% eher '\box' sinnvoller wäre, denn nun kann \meta{text2} noch
% vom Zeilenpasser bearbeitet werden, und damit die Zentrierung
% kaputtgehen.)
% \end{macro}
%
% \subsection{Literale hervorheben}
%

% \begin{macro}{\markString}
% \begin{macro}{\markNumber}
% \begin{macro}{\markLiteralKeyword}
%   Diese drei Makros sind Deklarationen, die
%   den Bereich bis zum nächsten Gruppenende als
%   Literal markieren. Sie werden von unserem
%   Quelltext-Drucker in der Form '{\markNumber 20}' verwendet: {\markNumber '20'}
\providecommand*{\markString}{%
  \color{blue}}% Strings markieren wir blau.
\providecommand*{\markNumber}{%
  \color[named]{ForestGreen}}% Zahlen sind grün.
\providecommand*{\markLiteralKeyword}{%
  \color[named]{Brown}}% Und Schlüsselwortliterale wie {\markLiteralKeyword 'null'},
% {\markLiteralKeyword 'true'}, {\markLiteralKeyword 'false'} sind braun.
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
% \subsection{sourcecode-Umgebung}
%
% \begin{environment}{sourcecode}
% Diese Umgebung verwenden wir, um Quelltext zu setzen.

%\begin{minipage}{.45\textwidth}
%\begin{sourcecode}
%  \ltdIndent.\textbf{private} DocletStart()\ltdSetIndent{4}\ltdSetIndent{0}
%  \ltdIndent.\{\ltdSetIndent{4}
%  \ltdIndent    .super()~\clap{\textbf{;}} 
%  \ltdSetIndent{0}\ltdIndent.\}
%\end{sourcecode}
%\end{minipage}
%\begin{minipage}{.45\textwidth}
%\begin{verbatim}
%\begin{sourcecode}
%  \ltdIndent.\textbf{private} DocletStart()\ltdSetIndent{4}\ltdSetIndent{0}
%  \ltdIndent.\{\ltdSetIndent{4}
%  \ltdIndent    .super()~\clap{\textbf{;}} 
%  \ltdSetIndent{0}\ltdIndent.\}
%\end{sourcecode}
%\end{verbatim}
%\end{minipage}
%
% Und ein längeres Beispiel:
%
% \begin{sourcecode}
% \ltdIndent.\textbf{public} void writeDoku()\ltdSetIndent{4}\ltdSetIndent{0}
% \ltdIndent.\{\ltdSetIndent{4}
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.MainFileWriter.writePackages()}{writePackages}()~\clap{\textbf{;}} 
% \ltdIndent    .configuration\textbf{.}root\textbf{.}printNotice({\markString \verb#"ltxdoclet: doku-main.tex wird erstellt ..."#})~\clap{\textbf{;}} 
% \ltdIndent    .println({\markString \verb#"   % Damit beim Compilieren nicht bei jedem Fehler angehalten wird"#})~\clap{\textbf{;}} 
% \ltdIndent    .println({\markString \verb#"\\scrollmode"#})~\clap{\textbf{;}} 
% \ltdIndent    .println()~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.MainFileWriter.writePreamble()}{writePreamble}()~\clap{\textbf{;}} 
% \ltdIndent    .println({\markString \verb#"\\begin{document}"#})~\clap{\textbf{;}} 
% \ltdIndent    .println()~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.LaTeXWriter.chapter(java.lang.String,boolean)}{chapter}({\markString \verb#"Übersicht"#}, {\markLiteralKeyword false})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.LaTeXWriter.ltxwrite(java.lang.String)}{ltxwrite}(configuration\textbf{.}doctitle \clap{$+$} {\markString \verb#" besteht aus den folgenden Packages. Eine"#})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.LaTeXWriter.ltxwrite(java.lang.String)}{ltxwrite}({\markString \verb#" kurze Beschreibung folgt danach."#})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.LaTeXWriter.section(java.lang.String)}{section}({\markString \verb#"Package-Liste"#})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.MainFileWriter.writePackageList()}{writePackageList}()~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.LaTeXWriter.section(java.lang.String)}{section}({\markString \verb#"Beschreibung"#})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.MainFileWriter.writeOverview()}{writeOverview}()~\clap{\textbf{;}} 
% \ltdIndent    .println({\markString \verb#"\\setcounter{chapter}{0}"#})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.MainFileWriter.writePackageImports()}{writePackageImports}()~\clap{\textbf{;}} 
% \ltdIndent    .println({\markString \verb#"\\appendix"#})~\clap{\textbf{;}} 
% \ltdIndent    .println({\markString \verb#"\\end{document}"#})~\clap{\textbf{;}} 
% \ltdIndent    .close()~\clap{\textbf{;}} 
% \ltdIndent    .configuration\textbf{.}root\textbf{.}printNotice({\markString \verb#"ltxdoclet: ... doku-main.tex fertig."#})~\clap{\textbf{;}} 
% \ltdIndent    .configuration\textbf{.}root\textbf{.}printNotice({\markString \verb#"ltxdoclet: warte auf Beendigung der anderen Dateien ..."#})~\clap{\textbf{;}} 
% \ltdIndent    .\hyperlink{de.dclj.paul.ltxdoclet.MainFileWriter.waitForAllThreads()}{waitForAllThreads}()~\clap{\textbf{;}} 
% \ltdIndent    .configuration\textbf{.}root\textbf{.}printNotice({\markString \verb#"ltxdoclet: Fertig!"#})~\clap{\textbf{;}} 
% \ltdSetIndent{0}\ltdIndent.\}
% \end{sourcecode}
% 
% Der Inhalt dieser Umgebung wird von unserem \LaTeX-doclet
% automatisch generiert, indem ein Syntaxbaum des Compilers
% abgelaufen wird.
%
% Hier die Definition:
\newenvironment*{sourcecode}%
{% Einstellungen am Anfang:
  \par% zuerst beenden wir den Absatz, falls da einer ist.
  \setlength{\parindent}{0pt}%  Wir wollen keine Paragraphen-Einrückung hier.
  \ttfamily\small% Alles soll in einer \texttt{nichtproportionalen}
  %  Schrift und etwas kleiner sein.
  % 
  \catcode`\ =\active% Leerzeichen wollen wir aktiv machen, und ...
  %!\expandafter\let\ltd@activeSpace=\ltd@DiscrSpace% ('\let =\ltd@DiscrSpace')
  % 
  \obeylines% Zeilenumbrüche sollen bitte behalten werden.
  % (Alternativ könnten wir unseren Quelltext-Formatierer
  % immer '\par' ausgeben lassen, aber so ist es einfacher.)
  %
  \raggedright% das bringt etwas weniger \emph{Overfull hbox}-Meldungen,
  %  und erlaubt einen gewissen Zeilenumbruch im Quelltext. Wir müssen
  %  uns da aber noch etwas besseres ausdenken (siehe oben der Versuch
  % mit den aktiven Leerzeichen.
  %
}{% Am Ende der Umgebung muss nicht so viel gemacht werden:
  \par% wir beenden nur noch den Absatz (und alle Definitionen
  % von oben werden rückgängig gemahcht, weil die Gruppe endet).
}%
%
% \end{environment}
%
% In unseren 'sourcecode'-Umgebungen soll ' ' aktiv sein und
% wie '\ltdBreak{~}' funktionieren.
%
\catcode`\ =\active% Wir lassen \verb*' ' aktiv sein, und \dots
\def\ltd@activeSpace{ }% merken uns in diesem Makro ein aktives Leerzeichen.
\catcode`\ =10% Hier schalten wir wieder zurück.
%
%
%
% \subsection{Einrückungen}
%
% \begin{macro}{\ltdSetIndent}\marg{anzahl}
%   Setzt die Einrückung für folgende
%   Zeilen auf den angegebenen Wert
%   (in Zeichenbreiten).
\newcounter{ltxdoclet@indent}
\providecommand*{\ltdSetIndent}[1]{%
  \setcounter{ltxdoclet@indent}{#1}%
}%
% \end{macro}
%
%
\newlength{\ltxdoclet@indentlen}
%
% \begin{macro}{\ltdIndent}\meta{space}'.'
%
%   Setzt soviel Platz wie nach aktueller Einrückungslänge
%   notwendig.
\newcommand*{\ltdIndent}{}%
\def\ltdIndent#1.{%
  \settowidth{\ltxdoclet@indentlen}{~}%
  \multiply\ltxdoclet@indentlen by\value{ltxdoclet@indent}\relax%
  \leavevmode\kern\ltxdoclet@indentlen
}
% \end{macro}
%
% \begin{macro}{\ltdBreak}
%   Setzt ein Element mit erlaubtem Umbruch danach.  
\providecommand*{\ltdBreak}[1][]{%
  #1\discretionary{}{\ltdIndent.}{}%
}
% \end{macro}
% \begin{macro}{\ltd@DiscrSpace}
%  Dieses Kommando ist ein Leerzeichen, welches 
%  zu einer Einrückung umbrechen kann. Die Definition ist analog
%  zu der in \pack{gmdoc-enhance}.
\def\ltd@DiscrSpace{%
  \ifx\protect\@typeset@protect%
    \ifinner%
        \space%  Wenn wir in einer inneren Box sind, soll das aktive
% Leerzeichen wie ein normales Leerzeichen funktionieren, da es ja
% hier sowieso keinen Zeilenumbruch gibt. Oder? Egal, unsere
% Code-Kommentare sollten nie im inneren Modus auftauchen.
    \else%
      \ifhmode%
        \unskip% Hmm, ich bin mir nicht ganz sicher, warum dieser
% Befehl hier notwendig ist. Ohne gibt es jedenfalls gelegentlich
% Zeilenumbrüche, die nicht an einen dieser '\discretionary's
% fallen (und entsprechend kein '%' in der nächsten Zeile haben.)
%
        \discretionary{% Die "`Expansion"' dieses '\discretionary'-Objektes
% falls es hier einen Zeilenumbruch gibt, ist am Ende der Zeile
% leer.
        }{\ltdIndent.% Dafür taucht am Anfang der nächsten Zeile
% die Box auf, die durch '\ltdIndent' gesetzt wird.
        }{% Falls kein Umbruch an dieser Stelle erfolgte, ist es
% ebenfalls leer.
        }%
        ~% Jetzt setzen wir noch ein nicht-umbrechbares Leerzeichen. Falls
% es einen Umbruch gab, war der ja davor.
      \else% 
        \space% Außerhalb des horizontalen Modus (d.h. im Mathe- und im
% vertikalen Modus) hat unsere Spezialfunktion auch nichts
% zu suchen.
      \fi%
    \fi%
    \afterfi{%
      \ltd@gobbleActiveSpaces}% Am Ende fressen wir alle weiteren
% direkt       folgenden derartigen aktiven Leerzeichen auf, damit es nicht
% mehrere auf einmal gibt.
%
% Eigentlich sorgt das obige '\unskip' ja schon dafür, dass mehrere
% aufeinanderfolgende aktive Leerzeichen (die ja prinzipiell ein '~'
% als skip einfügen), keine Probleme bereiten, nur das letzte bleibt übrig.
% Damit ist das '\gmd@gobbleActiveSpaces' eigentlich nicht mehr
% nötig. Aber wir entlasten damit den Zeilenumbruch-Algorithmus
% etwas, wenn nicht mehrere '\discretionary's hintereinander kommen.
  \else%
    \space% Falls wir nicht im Typeset-Modus sind, sondern etwa in eine Datei
% oder auf den Bildschirm schreiben, soll unser ' ' auch wie ein normales
% Leerzeichen wirken. Schließlich findet da kein Zeilenumbruch statt.
  \fi%
}%
% \end{macro}
%
%
\def\afterfi#1#2\fi{\fi#1}
%
% Hier die Definition unseres Space-Fressers.
\def\ltd@gobbleActiveSpaces{%
  \expandafter\@ifnextchar\ltd@activeSpace% Wir überprüfen, ob das
  % nächste Token ein aktives Leerzeichen ist.
  {% Falls ja, \dots
    \expandafter\ltd@gobbleActiveSpaces\@gobble% entsorgen wir es
    % mit '\@gobble' und rufen uns dann selbst rekursiv auf.
  }{}% Im anderen Fall machen wir gar nichts, womit die Rekursion
  % beendet ist.
}%
%

%
% \subsection{Hyperlinks}
%
% '\hypertarget' setzt das \ltdHypertarget{test-target}{Target} leider auf die Höhe der
% Grundlinie, so dass es gerade nicht zu sehen ist, wenn
% man es von einem '\hyperlink' anspringt.
%
% Hier ein Workaround, der bei PDFs für Adobe Reader und Okular das richtige macht.
% (Bei xdvi verschlechtert es die Situation für Links im unteren Teil der Seite.)
%
\newcommand*\ltdHypertarget[2]{%
  \setbox\@tempboxa\hbox{#2}%
  \@tempdima\ht\@tempboxa
  \@tempdimb\dp\@tempboxa
  \raisebox{1.5\@tempdima}[\@tempdima][\@tempdimb]%
  {%
    \hypertarget{#1}%
    {%
      \raisebox{-1.5\@tempdima}%
      {%
        \unhbox\@tempboxa%
      }%  (raisebox)
    }%  (hypertarget)
  }% (raisebox)
}
%
%

% \subsection{Ende}
% 

\endinput
%</package>
%
% \Finale
%\endinput


%%% Folgendes ist nur für meinen Editor.
%%%
%%% Local Variables:
%%% mode: docTeX
%%% TeX-master: t
%%% End:
